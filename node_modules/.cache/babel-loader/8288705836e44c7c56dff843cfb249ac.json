{"ast":null,"code":"var _jsxFileName = \"/Users/hendra/Development/pokemon-catch/src/components/PokemonListPage/index.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { gqlQuery, gqlQueryAbilites } from \"../PokemonQuerying\";\nimport PokemonModal from \"../pokemon-modal\";\nimport { Button } from \"../../styles/button\";\nimport { ContainerCards, Img, Li, P, Ul, WrapperButton } from \"./style\";\nimport { PokemonContext } from \"../../contexts/PokemonContext\";\n\nconst PokemonListPage = () => {\n  _s();\n\n  var _result$results;\n\n  let history = useHistory();\n  const {\n    dispatch\n  } = useContext(PokemonContext);\n  const [offset, setOffset] = useState(1);\n  const [limit] = useState(20);\n  const [result, setResult] = useState();\n  const [pokemonName, setPokemonName] = useState(\"ditto\");\n  const [pokemonImg, setPokemonImg] = useState();\n  const [pokemonDetails, setPokemonDetails] = useState();\n  const [openModal, setOpenModal] = useState(false);\n\n  const Fetching = () => {\n    fetch(\"https://graphql-pokeapi.graphcdn.app/\", {\n      credentials: \"omit\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: gqlQuery,\n        variables: {\n          limit,\n          offset\n        }\n      }),\n      method: \"POST\"\n    }).then(res => res.json()).then(res => {\n      var _res$data;\n\n      return setResult(res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.pokemons);\n    });\n  };\n\n  const FetchingPokemonDetails = () => {\n    fetch(\"https://graphql-pokeapi.graphcdn.app/\", {\n      credentials: \"omit\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: gqlQueryAbilites,\n        variables: {\n          pokemonName\n        }\n      }),\n      method: \"POST\"\n    }).then(res => res.json()).then(res => {\n      var _res$data2;\n\n      return setPokemonDetails(res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.pokemon);\n    });\n  };\n\n  useEffect(() => {\n    Fetching();\n    return () => {};\n  }, [Fetching, offset]);\n  useEffect(() => {\n    FetchingPokemonDetails();\n    return () => {};\n  }, [pokemonName]);\n  useEffect(() => {\n    return () => {};\n  }, [pokemonDetails]);\n\n  const handleClickPokemon = item => {\n    // extract pokemon name, and image\n    setPokemonImg(item.image);\n    setPokemonName(item.name);\n\n    if (pokemonDetails) {\n      setTimeout(() => {\n        dispatch({\n          type: \"POPULATE POKEMON\",\n          pokemons: {\n            data: pokemonDetails,\n            image: item.image,\n            name: item.name\n          }\n        });\n        setOpenModal(prev => !prev);\n      }, 6000);\n    }\n  };\n\n  const handleClickPrev = () => {\n    setOffset(prev => prev - 20);\n  };\n\n  const handleClickNext = () => {\n    setOffset(prev => prev + 20);\n  };\n\n  return /*#__PURE__*/React.createElement(ContainerCards, {\n    className: \"container-cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, !openModal && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Ul, {\n    className: \"list-cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, result && (result === null || result === void 0 ? void 0 : (_result$results = result.results) === null || _result$results === void 0 ? void 0 : _result$results.map((item, key) => {\n    return /*#__PURE__*/React.createElement(Li // get pokemon information more details, show modal\n    , {\n      onClick: () => handleClickPokemon(item),\n      key: key,\n      className: `pokemon-cards`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Img, {\n      className: \"\",\n      src: item.image,\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(P, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, item.name));\n  }))), /*#__PURE__*/React.createElement(WrapperButton, {\n    className: \"wrapper-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-prev\",\n    onClick: () => handleClickPrev(),\n    disabled: offset <= 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Prev\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-next\",\n    onClick: () => handleClickNext(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, \"Next\"))));\n};\n\n_s(PokemonListPage, \"3Ht7lI3XawQ08ihF8OJKVMVZx9U=\", false, function () {\n  return [useHistory];\n});\n\n_c = PokemonListPage;\nexport default PokemonListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonListPage\");","map":{"version":3,"sources":["/Users/hendra/Development/pokemon-catch/src/components/PokemonListPage/index.jsx"],"names":["React","useContext","useEffect","useState","useHistory","gqlQuery","gqlQueryAbilites","PokemonModal","Button","ContainerCards","Img","Li","P","Ul","WrapperButton","PokemonContext","PokemonListPage","history","dispatch","offset","setOffset","limit","result","setResult","pokemonName","setPokemonName","pokemonImg","setPokemonImg","pokemonDetails","setPokemonDetails","openModal","setOpenModal","Fetching","fetch","credentials","headers","body","JSON","stringify","query","variables","method","then","res","json","data","pokemons","FetchingPokemonDetails","pokemon","handleClickPokemon","item","image","name","setTimeout","type","prev","handleClickPrev","handleClickNext","results","map","key"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { gqlQuery, gqlQueryAbilites } from \"../PokemonQuerying\";\n\nimport PokemonModal from \"../pokemon-modal\";\n\nimport { Button } from \"../../styles/button\";\nimport { ContainerCards, Img, Li, P, Ul, WrapperButton } from \"./style\";\nimport { PokemonContext } from \"../../contexts/PokemonContext\";\n\nconst PokemonListPage = () => {\n  let history = useHistory();\n  const { dispatch } = useContext(PokemonContext);\n\n  const [offset, setOffset] = useState(1);\n  const [limit] = useState(20);\n  const [result, setResult] = useState();\n\n  const [pokemonName, setPokemonName] = useState(\"ditto\");\n  const [pokemonImg, setPokemonImg] = useState();\n  const [pokemonDetails, setPokemonDetails] = useState();\n  const [openModal, setOpenModal] = useState(false);\n\n  const Fetching = () => {\n    fetch(\"https://graphql-pokeapi.graphcdn.app/\", {\n      credentials: \"omit\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: gqlQuery,\n        variables: {\n          limit,\n          offset,\n        },\n      }),\n      method: \"POST\",\n    })\n      .then((res) => res.json())\n      .then((res) => setResult(res?.data?.pokemons));\n  };\n\n  const FetchingPokemonDetails = () => {\n    fetch(\"https://graphql-pokeapi.graphcdn.app/\", {\n      credentials: \"omit\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: gqlQueryAbilites,\n        variables: {\n          pokemonName,\n        },\n      }),\n      method: \"POST\",\n    })\n      .then((res) => res.json())\n      .then((res) => setPokemonDetails(res?.data?.pokemon));\n  };\n\n  useEffect(() => {\n    Fetching();\n\n    return () => {};\n  }, [Fetching, offset]);\n\n  useEffect(() => {\n    FetchingPokemonDetails();\n\n    return () => {};\n  }, [pokemonName]);\n\n  useEffect(() => {\n    return () => {};\n  }, [pokemonDetails]);\n\n  const handleClickPokemon = (item) => {\n    // extract pokemon name, and image\n    setPokemonImg(item.image);\n    setPokemonName(item.name);\n\n    if (pokemonDetails) {\n      setTimeout(() => {\n        dispatch({\n          type: \"POPULATE POKEMON\",\n          pokemons: {\n            data: pokemonDetails,\n            image: item.image,\n            name: item.name,\n          },\n        });\n\n        setOpenModal((prev) => !prev);\n      }, 6000);\n    }\n  };\n\n  const handleClickPrev = () => {\n    setOffset((prev) => prev - 20);\n  };\n\n  const handleClickNext = () => {\n    setOffset((prev) => prev + 20);\n  };\n\n  return (\n    <ContainerCards className=\"container-cards\">\n      {!openModal && (\n        <>\n          <Ul className=\"list-cards\">\n            {result &&\n              result?.results?.map((item, key) => {\n                return (\n                  <Li\n                    // get pokemon information more details, show modal\n                    onClick={() => handleClickPokemon(item)}\n                    key={key}\n                    className={`pokemon-cards`}\n                  >\n                    <Img className=\"\" src={item.image} alt=\"img\" />\n                    <P>{item.name}</P>\n                  </Li>\n                );\n              })}\n          </Ul>\n\n          <WrapperButton className=\"wrapper-buttons\">\n            <Button\n              className=\"btn-prev\"\n              onClick={() => handleClickPrev()}\n              disabled={offset <= 1}\n            >\n              Prev\n            </Button>\n\n            <Button className=\"btn-next\" onClick={() => handleClickNext()}>\n              Next\n            </Button>\n          </WrapperButton>\n        </>\n      )}\n\n      {/* {openModal && (\n        <PokemonModal\n          data={pokemonDetails}\n          img={pokemonImg}\n          modal={setOpenModal}\n        />\n      )} */}\n    </ContainerCards>\n  );\n};\n\nexport default PokemonListPage;\n"]},"metadata":{},"sourceType":"module"}